# -*- coding: utf-8 -*-
"""wine Quality_Prediction.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1uPPDQ_qls52pa1WVkOBZrbRj5NmYD5r9
"""

import numpy as np
import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split
from sklearn.metrics import classification_report, confusion_matrix
from sklearn.model_selection import GridSearchCV, cross_val_score
from sklearn.ensemble import RandomForestClassifier
from sklearn.externals import joblib
import pickle
from sklearn.preprocessing import StandardScaler, LabelEncoder

dataset = pd.read_csv("/content/wine.csv")

dataset.shape

dataset.info

dataset.head()

dataset.describe()

dataset.corr()

dataset.isnull().values.any()

"""** GRAPH 
VISUALIZATION**
"""

#Fixed Acidity
dataset.iloc[:,1].plot.hist(grid=True, bins=20, rwidth=0.9,
                   color='green')

plt.title('Fixed Acidity Histogram')
plt.xlabel('Fixed Acidity')
plt.ylabel('Count')

#volatile acidity
dataset.iloc[:,2].plot.hist(grid=True, bins=20, rwidth=0.9,
                   color='red')

plt.title('Volatile Acidity Histogram')
plt.xlabel('Volatile Acidity')
plt.ylabel('Count')

#Residual sugar
dataset.iloc[:,3].plot.hist(grid=True, bins=20, rwidth=0.9,
                   color='blue')

plt.title('Residual Sugar Histogram')
plt.xlabel('Residual Sugar')
plt.ylabel('Count')

#Chlorides
dataset.iloc[:,4].plot.hist(grid=True, bins=20, rwidth=0.9,
                   color='black')

plt.title('Chlorides Histogram')
plt.xlabel('Chlorides Sugar')
plt.ylabel('Count')

#free sulphur dioxide
dataset.iloc[:,5].plot.hist(grid=True, bins=20, rwidth=0.9,
                   color='gray')

plt.title('Free Sulfur Dioxide Histogram')
plt.xlabel('Free Sulfur Dioxide')
plt.ylabel('Count')

#Total Sulfur Dioxide
dataset.iloc[:,6].plot.hist(grid=True, bins=20, rwidth=0.9,
                   color='black')

plt.title('Total Sulfur Dioxide Histogram')
plt.xlabel('Total Sulfur Dioxide')
plt.ylabel('Count')

#Density
dataset.iloc[:,7].plot.hist(grid=True, bins=20, rwidth=0.9,
                   color='gray')

plt.title('Density Histogram')
plt.xlabel('Density')
plt.ylabel('Count')

#pH
dataset.iloc[:,8].plot.hist(grid=True, bins=20, rwidth=0.9,
                   color='yellow')

plt.title('pH Histogram')
plt.xlabel('pH')
plt.ylabel('Count')

#Sulphates
dataset.iloc[:,9].plot.hist(grid=True, bins=20, rwidth=0.9,
                   color='green')

plt.title('Sulphates Histogram')
plt.xlabel('Sulphates')
plt.ylabel('Count')

#Alcohol
dataset.iloc[:,10].plot.hist(grid=True, bins=20, rwidth=0.9,
                   color='black')

plt.title('Alcohol Histogram')
plt.xlabel('Alcohol')
plt.ylabel('Count')

dataset.iloc[:,11].plot.hist(grid=True, bins=20, rwidth=0.9,
                   color='pink')

plt.title('Quality Histogram')
plt.xlabel('Quality')
plt.ylabel('Count')

fig = plt.figure(figsize = (10,6))
sns.barplot(x = 'quality', y = 'volatile acidity', data = dataset)

fig = plt.figure(figsize = (10,6))
sns.barplot(x = 'quality', y = 'chlorides', data = dataset)

fig = plt.figure(figsize = (10,6))
sns.barplot(x = 'quality', y = 'citric acid', data = dataset)



fig = plt.figure(figsize = (10,6))
sns.barplot(x = 'quality', y = 'alcohol', data = dataset)

fig = plt.figure(figsize = (10,6))
sns.barplot(x = 'quality', y = 'sulphates', data = dataset)

sns.heatmap(dataset.corr(),cmap='coolwarm',annot=True)

sns.pairplot(dataset, hue="quality", palette='coolwarm')

y  = dataset['quality']
# making binary classification
dataset['quality'] = dataset['quality'].map({3 : 'bad', 4 :'bad', 5: 'bad',
                                      6: 'good', 7: 'good', 8: 'good'})

X= dataset[['fixed acidity', 'volatile acidity', 'citric acid','residual sugar', 'chlorides', 'total sulfur dioxide', 'density', 'sulphates', 'alcohol']]

#Now lets assign a labels to our quality variable
label_quality = LabelEncoder()
dataset['quality'] = label_quality.fit_transform(dataset['quality'])

X_train, X_test, y_train, y_test = train_test_split(X, y, random_state=3)
X_train.shape
y_train.shape 
X_test.shape 
y_test.shape

y_test

sc = StandardScaler()
X_train = sc.fit_transform(X_train)
X_test = sc.fit_transform(X_test)

model =  RandomForestClassifier(n_estimators=200)

model.fit(X_train,y_train)

y_pred = model.predict(X_test)

print("Training accuracy :", model.score(X_train, y_train))
print("Testing accuracy :", model.score(X_test, y_test))

print(classification_report(y_test, y_pred))

print(confusion_matrix(y_test, y_pred))

joblib.dump(model, 'wine.pkl')